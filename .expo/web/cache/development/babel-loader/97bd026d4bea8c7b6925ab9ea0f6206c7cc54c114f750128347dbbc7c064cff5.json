{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { getPlaybackState, addEventListener } from \"../trackPlayer\";\nimport { Event } from \"../constants\";\nexport var usePlaybackState = function usePlaybackState() {\n  var _useState = useState({\n      state: undefined\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    playbackState = _useState2[0],\n    setPlaybackState = _useState2[1];\n  useEffect(function () {\n    var mounted = true;\n    getPlaybackState().then(function (fetchedState) {\n      if (!mounted) return;\n      setPlaybackState(function (currentState) {\n        return currentState.state ? currentState : fetchedState;\n      });\n    }).catch(function () {});\n    var sub = addEventListener(Event.PlaybackState, function (state) {\n      setPlaybackState(state);\n    });\n    return function () {\n      mounted = false;\n      sub.remove();\n    };\n  }, []);\n  return playbackState;\n};","map":{"version":3,"names":["useEffect","useState","getPlaybackState","addEventListener","Event","usePlaybackState","state","undefined","playbackState","setPlaybackState","mounted","then","fetchedState","currentState","catch","sub","PlaybackState","remove"],"sources":["C:/Users/devandroid/Desktop/TrabajoFinalDAI/node_modules/react-native-track-player/lib/hooks/usePlaybackState.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { getPlaybackState, addEventListener } from '../trackPlayer';\nimport { Event } from '../constants';\n/**\n * Get current playback state and subsequent updates.\n *\n * Note: While it is fetching the initial state from the native module, the\n * returned state property will be `undefined`.\n * */\nexport const usePlaybackState = () => {\n    const [playbackState, setPlaybackState] = useState({\n        state: undefined,\n    });\n    useEffect(() => {\n        let mounted = true;\n        getPlaybackState()\n            .then((fetchedState) => {\n            if (!mounted)\n                return;\n            // Only set the state if it wasn't already set by the Event.PlaybackState listener below:\n            setPlaybackState((currentState) => currentState.state ? currentState : fetchedState);\n        })\n            .catch(() => {\n            /** getState only throw while you haven't yet setup, ignore failure. */\n        });\n        const sub = addEventListener(Event.PlaybackState, (state) => {\n            setPlaybackState(state);\n        });\n        return () => {\n            mounted = false;\n            sub.remove();\n        };\n    }, []);\n    return playbackState;\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,gBAAgB,EAAEC,gBAAgB;AAC3C,SAASC,KAAK;AAOd,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;EAClC,gBAA0CJ,QAAQ,CAAC;MAC/CK,KAAK,EAAEC;IACX,CAAC,CAAC;IAAA;IAFKC,aAAa;IAAEC,gBAAgB;EAGtCT,SAAS,CAAC,YAAM;IACZ,IAAIU,OAAO,GAAG,IAAI;IAClBR,gBAAgB,EAAE,CACbS,IAAI,CAAC,UAACC,YAAY,EAAK;MACxB,IAAI,CAACF,OAAO,EACR;MAEJD,gBAAgB,CAAC,UAACI,YAAY;QAAA,OAAKA,YAAY,CAACP,KAAK,GAAGO,YAAY,GAAGD,YAAY;MAAA,EAAC;IACxF,CAAC,CAAC,CACGE,KAAK,CAAC,YAAM,CAEjB,CAAC,CAAC;IACF,IAAMC,GAAG,GAAGZ,gBAAgB,CAACC,KAAK,CAACY,aAAa,EAAE,UAACV,KAAK,EAAK;MACzDG,gBAAgB,CAACH,KAAK,CAAC;IAC3B,CAAC,CAAC;IACF,OAAO,YAAM;MACTI,OAAO,GAAG,KAAK;MACfK,GAAG,CAACE,MAAM,EAAE;IAChB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN,OAAOT,aAAa;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}