{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { getPlayWhenReady, addEventListener } from \"../trackPlayer\";\nimport { Event } from \"../constants\";\nexport var usePlayWhenReady = function usePlayWhenReady() {\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    playWhenReady = _useState2[0],\n    setPlayWhenReady = _useState2[1];\n  useEffect(function () {\n    var mounted = true;\n    getPlayWhenReady().then(function (initialState) {\n      if (!mounted) return;\n      setPlayWhenReady(function (state) {\n        return state != null ? state : initialState;\n      });\n    }).catch(function () {});\n    var sub = addEventListener(Event.PlaybackPlayWhenReadyChanged, function (event) {\n      setPlayWhenReady(event.playWhenReady);\n    });\n    return function () {\n      mounted = false;\n      sub.remove();\n    };\n  }, []);\n  return playWhenReady;\n};","map":{"version":3,"names":["useState","useEffect","getPlayWhenReady","addEventListener","Event","usePlayWhenReady","undefined","playWhenReady","setPlayWhenReady","mounted","then","initialState","state","catch","sub","PlaybackPlayWhenReadyChanged","event","remove"],"sources":["C:/Users/devandroid/Desktop/TrabajoFinalDAI/node_modules/react-native-track-player/lib/hooks/usePlayWhenReady.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getPlayWhenReady, addEventListener } from '../trackPlayer';\nimport { Event } from '../constants';\nexport const usePlayWhenReady = () => {\n    const [playWhenReady, setPlayWhenReady] = useState(undefined);\n    useEffect(() => {\n        let mounted = true;\n        getPlayWhenReady()\n            .then((initialState) => {\n            if (!mounted)\n                return;\n            // Only set the state if it wasn't already set by the Event.PlaybackPlayWhenReadyChanged listener below:\n            setPlayWhenReady((state) => state ?? initialState);\n        })\n            .catch(() => {\n            /** getState only throw while you haven't yet setup, ignore failure. */\n        });\n        const sub = addEventListener(Event.PlaybackPlayWhenReadyChanged, (event) => {\n            setPlayWhenReady(event.playWhenReady);\n        });\n        return () => {\n            mounted = false;\n            sub.remove();\n        };\n    }, []);\n    return playWhenReady;\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,gBAAgB,EAAEC,gBAAgB;AAC3C,SAASC,KAAK;AACd,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;EAClC,gBAA0CL,QAAQ,CAACM,SAAS,CAAC;IAAA;IAAtDC,aAAa;IAAEC,gBAAgB;EACtCP,SAAS,CAAC,YAAM;IACZ,IAAIQ,OAAO,GAAG,IAAI;IAClBP,gBAAgB,EAAE,CACbQ,IAAI,CAAC,UAACC,YAAY,EAAK;MACxB,IAAI,CAACF,OAAO,EACR;MAEJD,gBAAgB,CAAC,UAACI,KAAK;QAAA,OAAKA,KAAK,WAALA,KAAK,GAAID,YAAY;MAAA,EAAC;IACtD,CAAC,CAAC,CACGE,KAAK,CAAC,YAAM,CAEjB,CAAC,CAAC;IACF,IAAMC,GAAG,GAAGX,gBAAgB,CAACC,KAAK,CAACW,4BAA4B,EAAE,UAACC,KAAK,EAAK;MACxER,gBAAgB,CAACQ,KAAK,CAACT,aAAa,CAAC;IACzC,CAAC,CAAC;IACF,OAAO,YAAM;MACTE,OAAO,GAAG,KAAK;MACfK,GAAG,CAACG,MAAM,EAAE;IAChB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN,OAAOV,aAAa;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}